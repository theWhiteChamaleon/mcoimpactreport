{"version":3,"file":"static/js/21.7da57e94.chunk.js","mappings":"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","sources":["hooks/useRevisions.js","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/SearchInput/SearchInput.jsx","services/api/PlantAssignment/fetchCsrfService.js","hooks/usePlantAssignment.js","hooks/useToast.js","components/Button/Button.jsx","services/api/PlantAssignment/searchCAService.js","services/api/PlantAssignment/getRouteDetails.js","services/api/PlantAssignment/assignedPlantService.js","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","hooks/useInterComSearch.js","components/List/List.jsx","components/Card/Card.jsx","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/userGroupService.js","components/Loader/Loader.js","hooks/usePlantDropableArea.js","hooks/useDroppableArea.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/allPlantSevice.js"],"sourcesContent":["import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = ({ widgetType }) => {\r\n  const plantDroppable = usePlantDropableArea();\r\n  const bosDropable = useBOSDropableArea();\r\n  const defaultDroppable = useDroppableArea();\r\n  const mcoimpactreportDroppable = usePlantDropableArea();\r\n\r\n  const { initializeDroppableArea } =\r\n    widgetType === \"PlantAssignment\"\r\n      ? plantDroppable\r\n      : widgetType === \"bosWidget\"\r\n      ? bosDropable\r\n      : widgetType === \"mcoimpactreport\"\r\n      ? mcoimpactreportDroppable\r\n      : defaultDroppable;\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data, widgetType }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\");\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\");\r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging);\r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone widgetType={widgetType} />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n        widgetType={widgetType}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\n\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    const [ItemPlants, Iteminfo] = await Promise.all([\r\n                      getAssignedClasses(ItemId, headers),\r\n                      getItemDetails(ItemId, ItemType, headers),\r\n                    ]);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemRev: Iteminfo?.member[0].revision || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both functions in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }    \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd, widgetType }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            {\r\n              widgetType !== \"MBOMImpactReport\" &&\r\n              <>\r\n                <p>\r\n                  <b>Dropped Revision :</b>{\" \"}\r\n                  <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                    {data[\"Dropped Revision\"]}\r\n                  </span>\r\n                </p>\r\n                <p>\r\n                  <b>Latest Released Revision:</b>{\" \"}\r\n                  <span\r\n                    className=\"list-text\"\r\n                    title={data[\"Latest Released Revision\"]}\r\n                  >\r\n                    {data[\"Latest Released Revision\"]}\r\n                  </span>\r\n                </p>\r\n              </>\r\n            }\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" || widgetType !== \"MBOMImpactReport\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd, widgetType }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n          widgetType={widgetType}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          console.log(\"objectType --76-- \",objectType);\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Route\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n            const CAName = itm[\"ds6w:label\"];\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n \r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n \r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n \r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n \r\n              if(resObejct){\r\n                CADetails[\"CAName\"] = CAName;\r\n                CADetails[\"CAStatus\"] = status;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n"],"names":["useRevisions","showSuccessToast","showErrorToast","useToast","fetchRevisionsAndParents","async","objectId","objectType","relativePath","console","error","response","api","post","data","id","type","status","Error","concat","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","log","MSG_REPLACE_SUCCESS","success","MSG_REPLACE_ERROR","message","_ref","widgetType","plantDroppable","usePlantDropableArea","bosDropable","useBOSDropableArea","defaultDroppable","useDroppableArea","mcoimpactreportDroppable","initializeDroppableArea","hasInitializedDroppable","useRef","useEffect","current","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","isDragging","setIsDragging","useState","DragAndDropStandAlone","CardComponent","onDragStart","handleDragStart","onDragEnd","handleDragEnd","onSearch","disabled","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","onClick","handleSearchIconClick","trim","InputGroup","Form","Control","ref","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","Button","variant","handleClearClick","focus","fetchCsrfToken","securityContext1","window","widget","getValue","WAFData","loadWAFData","csrfURL","process","Promise","resolve","reject","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","name","csrfValue","securityContextHeader","securityContextValue","usePlantAssignment","dispatch","useDispatch","email","handlePlantAssignment","collabSpace","state","setParentDetailsLoading","headers","MSG_FETCH_CSRF_HEADERS_FAILED","ItemDetails","isMFGCA","fetchChangeActionData","CAURL","callEnoviaWebService","output","realizedChanges","map","realizedChange","where","identifier","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","sLatestID","revurl","ret","Body","source","JSON","stringify","result","results","ancestors","some","ancestor","getLatestRevision","includes","mfgDetails","url","itemResponse","member","ScopeEngItem","getScopedItms","undefined","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","all","getAssignedClasses","getItemDetails","push","ItemState","ItemTitle","title","ItemRev","revision","ItemMBOM","EMR_hasMBOM","err","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","length","warn","plants","fetchAssignedPlants","setPlantObjectData","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","plantIdData","ClassificationAttributes","forEach","classification","classId","ClassID","plantName","erpStatus","Attributes","attribute","PlantName","PlantID","PlantERPStatus","showToast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","progress","otherOptions","_objectWithoutProperties","_excluded","toast","_objectSpread","options","arguments","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","size","text","imageSrc","props","marginRight","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","ENOVIA_BASE_URL","fetchData","urlObjWAF","searchResponse","routeData","find","item","RouteID","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","classItem","parentClass","replace","obj","promiseArray","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","filter","allClass","assigned","initialAssignedPlants","uniquePlants","useBOSWidget","handleBOSWidget","parentName","parentRevision","baseURL","parentDirection","ChildObject","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","secondaryTitle","stateNLS","revisionBody","child","body","RevisionUrl","convertRevisionToNumber","rev","test","parseInt","number","i","charCodeAt","latestVersion","versions","reduce","latest","doc","version","isLatestRevision","SpecName","SpecRevision","Items","ItemName","ItemRevision","Specifications","mergedData","spec","matchingDoc","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","useInterComSearch","socket","setSocket","InterCom","setInterCom","interComInstance","loadInterCom","loadData","disconnect","performSearch","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","finalSearchOpts","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","isColumn","titleRef","initialDraggedData","droppedObjectData","makeDraggable","border","owner","paddingLeft","EIN","Description","setIsColumn","Card","Img","imageURL","CardBody","List","toggleFlexDirection","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","classes","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","members","Loader","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setTimeout","revisionParentData","parentDetails","resObejct","proposedChangesArray","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","objectsByPatterns","caproposedwhere_from","itm","CAName","url3","response3","Array","isArray","proposedChange","action","whats","what","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass"],"sourceRoot":""}